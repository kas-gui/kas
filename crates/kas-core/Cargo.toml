[package]
name = "kas-core"
version = "0.15.0"
authors.workspace = true
edition.workspace = true
license.workspace = true
description = "KAS GUI / core"
readme = "README.md"
documentation = "https://docs.rs/kas-core/"
keywords = ["gui"]
categories = ["gui"]
repository.workspace = true
rust-version.workspace = true
exclude = ["/screenshots"]

[package.metadata.docs.rs]
features = ["stable"]
rustdoc-args = ["--cfg", "docsrs"]

[features]
# The minimal feature set needed to build basic applications (with assumptions
# about target platforms).
minimal = ["wayland"]
# All standard test target features
stable = ["minimal", "clipboard", "markdown", "spawn", "x11", "serde", "toml", "yaml", "json", "ron", "macros_log", "image", "accesskit"]
# Enables all "recommended" features for nightly rustc
nightly = ["stable", "nightly-diagnostics"]
# Additional, less recommendation-worthy features
experimental = ["dark-light", "unsafe_node"]

# Enables better proc-macro diagnostics (including warnings); nightly only.
nightly-diagnostics = ["kas-macros/nightly"]
# Enables all proc-macro diagnostics, including pedantic warnings; nightly only.
nightly-diagnostics-pedantic = ["nightly-diagnostics", "kas-macros/nightly-pedantic"]

# Use full specialization
spec = []

# Enables documentation of APIs for graphics library and platform backends.
# This API is not intended for use by end-user applications and
# thus is omitted from built documentation by default.
# This flag does not change the API, only built documentation.
internal_doc = []

# Enable Markdown parsing
markdown = ["kas-text/markdown"]

# Enable support for YAML (de)serialisation
yaml = ["serde", "dep:serde_yaml2"]

# Enable support for JSON (de)serialisation
json = ["serde", "dep:serde_json"]

# Enable support for RON (de)serialisation
ron = ["serde", "dep:ron"]

# Enable support for TOML (de)serialisation
toml = ["serde", "dep:toml"]

# Enables clipboard read/write
clipboard = ["dep:arboard", "dep:smithay-clipboard"]

# Enable AccessKit integration
accesskit = ["dep:accesskit", "dep:accesskit_winit"]

# Inject logging into macro-generated code.
# Requires that all crates using these macros depend on the log crate.
macros_log = ["kas-macros/log"]

# Support Wayland
wayland = ["winit/wayland", "winit/wayland-dlopen"]

# Support X11
x11 = ["winit/x11"]

# Enable serde integration (mainly config read/write)
serde = ["dep:serde", "kas-text/serde", "winit/serde"]

# Enable load_icon_from_path utility function
image = ["dep:image"]

# Automatically detect usage of dark theme
dark-light = ["dep:dark-light"]

# Support spawning async tasks
spawn = ["dep:async-global-executor"]

# Optimize Node using unsafe code
unsafe_node = []

[build-dependencies]
cfg_aliases = "0.2.0"

[dependencies]
log = "0.4"
smallvec = "1.6.1"
bitflags = "2.3.3"
unicode-segmentation = "1.7"
linear-map = "1.2.0"
thiserror = "2.0.3"
serde = { version = "1.0.123", features = ["derive"], optional = true }
serde_json = { version = "1.0.61", optional = true }
serde_yaml2 = { version = "0.1.2", optional = true }
ron = { version = "0.10.1", package = "ron", optional = true }
toml = { version = "0.9.4", package = "toml", optional = true }
dark-light = { version = "2.0", optional = true }
raw-window-handle = "0.6.0"
async-global-executor = { version = "3.1.0", optional = true }
cfg-if = "1.0.0"
smol_str = "0.2.0"
image = { version = "0.25.1", optional = true }
hash_hasher = "2.0.4"
accesskit = { version = "0.21.0", optional = true }
accesskit_winit = { version = "0.29.0", optional = true }

[target.'cfg(any(target_os="linux", target_os="dragonfly", target_os="freebsd", target_os="netbsd", target_os="openbsd"))'.dependencies]
smithay-clipboard = { version = "0.7.0", optional = true }

[target.'cfg(not(target_os = "android"))'.dependencies]
arboard = { version = "3.2.0", optional = true, default-features = false }


[dependencies.kas-macros]
version = "0.15.0"
path = "../kas-macros"

[dependencies.kas-text]
version = "0.8.0"

[dependencies.easy-cast]
version = "0.5.0" # used in doc links

[dependencies.winit]
# Provides translations for several winit types
version = "0.30.1"
default-features = false
features = ["rwh_06"]

[lints.clippy]
module_inception = "allow"
needless_lifetimes = "allow"
unit_arg = "allow"
match_like_matches_macro = "allow"
needless_range_loop = "allow"
too_many_arguments = "allow"
neg_cmp_op_on_partial_ord = "allow"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(internal_doc)'] }
