name: Tests

on:
  push:
    branches: [ master, '[0-9]+.[0-9]+' ]
  pull_request:
    branches: [ master, '[0-9]+.[0-9]+' ]

jobs:
  nightly:
    name: Nightly, format and Doc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - name: Install dependencies
        run: sudo apt-get install -y libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Rustfmt check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: doc (kas)
        run: cargo doc --all-features --no-deps
      - name: doc (kas-theme)
        run: cargo doc --manifest-path kas-theme/Cargo.toml --features stack_dst,unsize --no-deps
      - name: doc (kas-wgpu)
        run: cargo doc --manifest-path kas-wgpu/Cargo.toml --features stack_dst,unsize --no-deps
      - name: test (kas)
        run: cargo test --all-features
      - name: test (kas-theme)
        run: cargo test --manifest-path kas-theme/Cargo.toml --all-features
      - name: test (kas-wgpu)
        run: |
          cargo test --manifest-path kas-wgpu/Cargo.toml --no-default-features --features raster
          cargo test --manifest-path kas-wgpu/Cargo.toml --all-features

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [beta]

    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: test (kas-macros)
        run: cargo test --manifest-path kas-macros/Cargo.toml --all-features
      - name: test (kas)
        run: |
          cargo test
          # Note: we must test config with and without winit
          cargo test --features config
          cargo test --features config,winit,internal_doc,markdown,yaml,json,ron
      - name: test (kas-theme)
        run: cargo test --manifest-path kas-theme/Cargo.toml
      - name: test (kas-wgpu)
        run: cargo test --manifest-path kas-wgpu/Cargo.toml
